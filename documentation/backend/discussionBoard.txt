Instructors API Documentation

This doc outlines all the endpoints for discussionBoard operations.
NOTE: that all endpoints expect and return data in the JSON format.

BASE ENDPOINT: /api/discussionBoards

=====================================================================

ENDPOINT: /
METHODS: GET, POST

PURPOSE: The GET method will return all discussion boards/forums, the POST method will
         create a discussion board/forum

AUTHENTICATION: POST can be student, admin or instructor as long as User is authenticated

EXPECTED CODES:
        200 - Will indicate the GET is successful
        201 - Will indicate POST is successful
        400 - Something is wrong with your request
        500 - Server error

POSSIBLE 400 ERRORS: ORGANIZATION INVALID, DUPLICATE FORUM, COURSE NOT FOUND

EXAMPLES:
    GET
        Issue GET to localhost:3001/api/discussionBoards will give all forums

        RESPONSE BODY:
            [
                {
                    id: 'sdai3loq4b32hli1l',
                    title: 'General',
                    courseId: 'aowjefojofejofjeojf',
                    organizationId: '879670dansda7a131fe',
                    posts: []
                },
                {
                    id: 'fnqojo2p3fe',
                    title: 'Main',
                    courseId: 'ffjop2jeflwkflkwnf',
                    organizationId: 'fojfelqelqjdeqjf',
                    posts: []
                }
            ]

    POST
        Issue POST to localhost:3001/api/discussionBoards will create a forum

        SAMPLE HEADER:
            {
                Authorization: 'bearer AJDKAH8RQNRhdaspduihbBYOilbyOYPG8GL234'
            }

        SAMPLE REQUEST BODY:
            {
                title: 'General',
                courseid: 'sdai3loq4b3asd2das1l',
                organizationId: 'jfojefijfijfiejfije'
            }

        SAMPLE RESPONSE BODY:
            {
                id: 'sdai3loq4b32das1l',
                title: 'General',
                courseId: 'sdai3loq4b3asd2das1l
                organizationId: 'jfojefijfijfiejfije'
                posts: []
            }

=====================================================================

ENDPOINT: /:id
METHODS: GET, DELETE

PURPOSE: The GET method will return an forum, the DELETE method deletes a forum

AUTHENTICATION: DELETE needs instructor or student or admin to be authenticated/logged in
               (Requesting instructor is either admin for organization or
                the instructor themself)

EXPECTED CODES:
        200 - Will indicate the GET is successful
        204 - Will indicate DELETE is successful
        400 - Something is wrong with your request
        500 - Server error

EXAMPLES:
    GET
        Issue GET to localhost:3001/api/discussionBoards/6asdiasdj1231312 will give forum for id

        RESPONSE BODY:
            {
                id: '6asdiasdj1231312',
                title: 'General',
                courseId: 'foejfoo2j1j32jf39',
                organizationID: '879670dansda7a131fe',
                posts: []
            },

    DELETE
        Issue DELETE to localhost:3001/api/discussionBoards/6asdiasdj1231312 will delete a forum

        SAMPLE HEADER:
            {
                Authorization: 'bearer AJDKAH8RQNRhdaspduihbBYOilbyOYPG8GL234'
            }

        Expect a 204 response code

=====================================================================

ENDPOINT: /:id
METHOD: PUT

PURPOSE: The PUT method updates forum information

AUTHENTICATION: User can be admin, student or instructor but must be authenticated

EXPECTED CODES:
        200 - Will indicate the POST is successful
        400 - Something is wrong with your request (could be invalid email)
        500 - Server error

POSSIBLE 400 ERROR CODES: ORGANIZATION INVALID, DUPLICATE FORUM, COURSE NOT FOUND, CREATE ERROR

EXAMPLES:
    PUT:
        Issue PUT to localhost:3001/api/discussionBoards/fi3oi1hfoi32hf2hef

        SAMPLE HEADER:
            {
                Authorization: 'bearer AJDKAH8RQNRhdaspduihbBYOilbyOYPG8GL234'
            }

        SAMPLE REQUEST BODY:
            {
                title: 'Group 01',
            }

        SAMPLE RESPONSE BODY:
            {
                id: 'fi3oi1hfoi32hf2hef',
                title: 'Group 01',
                courseId: 'ndoi32hio2fn2inf',
                organizationId: '879670dansda7a131fe',
                posts: []
            },

=====================================================================

ENDPOINT: /delete_posts/:id
METHODS: PUT

PURPOSE:  PUT can delete a post from a forum

AUTHENTICATION: Must author of post or admin of org or course instructor, authenticated

EXPECTED CODES:
        200 - Will indicate the PUT is successful
        401 - Unauthorized
        400 - Something is wrong with your request
        500 - Server error

POSSIBLE 400 ERROR CODES: UPDATE ERROR

EXAMPLES:
    PUT:
        Issue PUT to localhost:3001/api/posts/delete_posts/fi3oi1hfoi32hf2hef

        SAMPLE HEADER:
            {
                Authorization: 'bearer AJDKAH8RQNRhdaspduihbBYOilbyOYPG8GL234'
            }

        SAMPLE REQUEST BODY:
            {
                courseid: 'jojofjoewjpo29',
                postId: 'ojfpoewjfpj323jf'  <- postId is mongoose.Types.objectID 
            }

        SAMPLE RESPONSE BODY:
            {
                id: 'fi3oi1hfoi32hf2hef',
                title: 'Group 01',
                courseId: 'ndoi32hio2fn2inf',
                organizationId: '879670dansda7a131fe',
                posts: []  <- postId objectID removed from posts 
            },

=====================================================================

ENDPOINT: /add_posts/:id
METHODS: PUT

PURPOSE:  PUT can add a post to a forum

AUTHENTICATION: Must be member of course or admin of org, authenticated

EXPECTED CODES:
        200 - Will indicate the PUT is successful
        401 - Unauthorized
        400 - Something is wrong with your request
        500 - Server error

POSSIBLE 400 ERROR CODES: UPDATE ERROR

EXAMPLES:
    PUT:
        Issue PUT to localhost:3001/api/posts/add_posts/fi3oi1hfoi32hf2hef

        SAMPLE HEADER:
            {
                Authorization: 'bearer AJDKAH8RQNRhdaspduihbBYOilbyOYPG8GL234'
            }

        SAMPLE REQUEST BODY:
            {
                courseid: 'jojofjoewjpo29',
                posts: ['ojfpoewjfpj323jf']  <- postId is mongoose.Types.objectID 
            }

        SAMPLE RESPONSE BODY:
            {
                id: 'fi3oi1hfoi32hf2hef',
                title: 'Group 01',
                courseId: 'ndoi32hio2fn2inf',
                organizationId: '879670dansda7a131fe',
                posts: ['ojfpoewjfpj323jf']  <- postId objectID removed from posts 
            },

=====================================================================